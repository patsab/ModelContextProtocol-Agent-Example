[project]
name = "mcp-example"
version = "0.1.0"
description = ""
authors = [
    { name = "patsab", email = "patrick.sabau@codecamp-n.com" }
]
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "mcp (>=1.4.1,<2.0.0)",
    "ruff (>=0.11.0,<0.12.0)",
    "openai (>=1.66.3,<2.0.0)",
    "huggingface-hub (>=0.29.3,<0.30.0)",
    "pytz (>=2025.1,<2026.0)"
]

[tool.ruff]
line-length = 140
# other rules:
# * "DJ" for Django
# * "PYI" for type stubs etc.
# * "PD" for PandasVet
# * "NPY" for NumPy

lint.select = [
    "E",
    "W", # PyCodeStyle
    "F", # PyFlakes
    "C90", # McCabe (Function Complexity
    "I", # ISort
    "N", # PEP8 Naming Conventions
    "D", # PyDocStyle
    "UP", # pyupgrade
    "YTT", # flake8-2020 ('Yield from' etc.)
    "ANN", # flake8-annotations (missing type annotations)
    "ASYNC", # flake8-async (various async issues)
    "S", # flake8-bandit (security issues)
    "BLE", # blind exceptions
    "FBT", # boolean traps (Anti-Pattern, Google it.)
    "B", # bugbear (various anti-patterns)
    "A", # flake8-builtins (shadowing builtins)
    "COM", # flake8-commas (comma placement at line-end)
    "C4", # flake8-comprehensions (comprehension issues like unnecessary list comprehensions etc.)
    "DTZ", # avoid usage of naive datetime objects
    "T10", # watch for Debugger imports
    "EM", # ensure error messages are not formatted as f-strings and similar
    "FA", # flake8-future-annotations (ensure type hint annotation use mnodern syntax)
    "ISC", # implicit string concatenation
    "G", # flake8-logging-format (ensure logging format strings are valid)
    "INP", # do not use implicit namspace packages
    "PIE", # various anti-patterns and misfeatures
    "T20", # watch for print() calls
    "PT", # pytest style issues
    "Q", # quotes (ensure consistent usage of single/double quotes)
    "RSE", # some "raise" syntax issues
    "RET", # return values anti-patterns
    "SLF", # flake8-self (do not access "_private" attributes from outside)
    "SLOT", # flake8-slots (ensure usage of __slots__)
    "SIM", # flake8-simplify (simplify various constructs)
    "INT", # gettext issues (format strings etc.)
    "ARG", # disallow unused arguments
    "PTH", # use pathlib instead of os.path
    "TD", # enforce some syntax on TODO comments
    "FIX", # highlight TODO, FIXME, XXX etc.
    "PGH", # pygrep-hooks (policing "noqa" and similar)
    "PL", # PyLint (various issues)
    "TRY", # try/except/else/finally anti-patterns (try.ceratops)
    "FLY", # join vs. f-strings
    "PERF", # various performance issues
    "FURB", # modernize various constructs
    "LOG", # logging issues
    "RUF", # ruff (various issues)
]

lint.ignore = [
    "T201", #allow print statements
    "ANN003", #allow missing type annotations for **kwargs
    "ANN204", #allow missing type annotations for **kwargs
    "D100", #allow missing docstrings in module
    "D104", #allow missing docstrings in __init__.py files
    "D401", #docstings don't need to be in imperative form
]

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"
